
1.需求：
Sunny软件公司基于面向对象技术开发了一套图形界面构件库VisualComponent，该构件库提供
了大量基本构件，如窗体、文本框、列表框等，由于在使用该构件库时，用户经常要求定制
一些特效显示效果，如带滚动条的窗体、带黑色边框的文本框、既带滚动条又带黑色边框的
列表框等等，因此经常需要对该构件库进行扩展以增强其功能

2.不使用装饰模式的做法
UML类图参照UML类图_before.jpg

3.存在的问题
a.系统扩展麻烦
在某些编程语言中无法实现。如果用户需要一个既带滚动条又带黑色边框
的窗体，在图中通过增加了一个新的类ScrollBarAndBlackBorderWindow来实现，该类既作
为ScrollBarWindow的子类，又作为BlackBorderWindow的子类；但现在很多面向对象编程语
言，如Java、C#等都不支持多重类继承，因此在这些语言中无法通过继承来实现对来自多个
父类的方法的重用。此外，如果还需要扩展一项功能，例如增加一个透明窗体类
TransparentWindow，它是Window类的子类，可以将一个窗体设置为透明窗体，现在需要一个
同时拥有三项功能（带滚动条、带黑色边框、透明）的窗体，必须再增加一个类作为三个窗
体类的子类，这同样在Java等语言中无法实现。系统在扩展时非常麻烦，有时候甚至无法实
现。
b.代码的复用率低
从图中我们可以看出，不只是窗体需要设置滚动条，文本框、列表框等都
需要设置滚动条，因此在ScrollBarWindow、ScrollBarTextBox和ScrollBarListBox等类中都包含
用于增加滚动条的方法setScrollBar()，该方法的具体实现过程基本相同，代码重复，不利于对
系统进行修改和维护。
c.系统庞大，类的数目多
类的数目非常多。如果增加新的控件或者新的扩展功能系统都需要增加大量的
具体类，这将导致系统变得非常庞大。